name: release

on:
    workflow_dispatch:

env:
    APK_PATH: null

jobs:
    release:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: List of domains
              id: list-domains
              run: |
                  jq -r '.to_download | to_entries | .[] | .value.url' settings.json | sed -E 's|https?://([^/]+).*|\1|' > domains.txt

            - name: Ping Domains
              run: |
                  ping -c 4 google.com || true
                  while read -r domain; do
                      ping -c 4 $domain || true
                  done < domains.txt

            - name: Check HTTP Access
              run: |
                  curl -I "https://google.com" || true
                  while read -r domain; do
                      curl -I "$domain" || true
                  done < domains.txt

            - name: Run Main.go
              id: run-main
              run: |
                  go run ./src/main.go --token="${{ secrets.GITHUB_TOKEN }}"

            - name: Set Environment Variables
              run: |
                  echo "APK_PATH=$(ls -S out/*.apk | head -n 1)" >> $GITHUB_ENV
                  if [[ "${{ steps.run-main.outcome }}" != "success" ]]; then
                      exit 1
                  fi

            - name: Get Apk Info
              id: apk-info
              uses: hkusu/apk-info-action@v1
              with:
                  apk-path: ${{ env.APK_PATH }}

            - name: Commit Changes
              run: |
                  git config --global user.email "apk-artifacts-downloader@github.com"
                  git config --global user.name "${{ github.repository_owner }}"
                  git add .
                  git commit -m "Update ${{ steps.apk-info.outputs.application-name }} to ${{ steps.apk-info.outputs.version-name }}"

            - name: Push Changes
              uses: ad-m/github-push-action@master
              with:
                  github_token: ${{ secrets.GITHUB_TOKEN }}

            - name: Check For Duplicate Release
              id: check-release
              run: |
                  release_id=$(gh release list --limit 1 | grep -oP '^\d+')
                  echo "Release ID: $release_id"
                  release_title=$(gh release view $release_id --json name --jq '.name')
                  echo "Release Title: $release_title"
                  if [[ $release_title == "\"${{ steps.apk-info.outputs.application-name }}\"" ]]; then
                      echo "Duplicate release found"
                      gh release delete $release_id
                      git tag -d ${{ steps.apk-info.outputs.version-name }}
                      git push origin :refs/tags/${{ steps.apk-info.outputs.version-name }}
                  fi
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Create Release
              uses: softprops/action-gh-release@v1
              with:
                  files: ${{ env.APK_PATH }}
                  tag_name: ${{ steps.apk-info.outputs.version-name }}
                  name: ${{ steps.apk-info.outputs.application-name }}
                  body: ${{ steps.apk-info.outputs.version-name }}

    rerun-workflow:
        name: Re-run workflow
        needs: release
        if: success() || failure()
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Wait for 5 minutes
              run: |
                  sleep 300

            - name: Re-trigger workflow
              run: gh workflow run release.yml
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  GH_REPO: ${{ github.repository }}
