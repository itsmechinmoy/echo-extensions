name: Spotify Secret Workflow
on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'  # Run every 6 hours

jobs:
  extract-secret:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install selenium webdriver-manager
          
      - name: Verify tampermonkey script exists
        run: |
          if [ ! -f "tampermonkey_script.js" ]; then
            echo "Error: tampermonkey_script.js not found in repository root"
            exit 1
          fi
          echo "✓ tampermonkey_script.js found"
          
      - name: Set up Xvfb
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb
          export DISPLAY=:99
          Xvfb :99 -screen 0 1920x1080x24 &
          echo "✓ Xvfb started"
          
      - name: Extract Spotify secrets
        run: |
          python3 << 'EOF'
          import time
          import os
          import json
          import tempfile
          import shutil
          from selenium import webdriver
          from selenium.webdriver.chrome.options import Options
          from selenium.webdriver.chrome.service import Service
          from selenium.webdriver.support.ui import WebDriverWait
          from selenium.webdriver.support import expected_conditions as EC
          from selenium.common.exceptions import TimeoutException, WebDriverException
          from webdriver_manager.chrome import ChromeDriverManager
          
          def setup_chrome_with_userscript():
              temp_dir = tempfile.mkdtemp(prefix='chrome_user_data_')
              extension_dir = tempfile.mkdtemp(prefix='chrome_extension_')
              
              with open('tampermonkey_script.js', 'r', encoding='utf-8') as f:
                  script_content = f.read()
              
              lines = script_content.split('\n')
              script_lines = []
              in_header = False
              
              for line in lines:
                  if line.strip().startswith('// ==UserScript=='):
                      in_header = True
                      continue
                  elif line.strip().startswith('// ==/UserScript=='):
                      in_header = False
                      continue
                  elif not in_header:
                      script_lines.append(line)
              
              clean_script = '\n'.join(script_lines)
              escaped_script = clean_script.replace('`', '\\`')  # Escape backticks outside f-string
              
              manifest = {
                  "manifest_version": 3,
                  "name": "Spotify Token Extractor",
                  "version": "1.0",
                  "content_scripts": [{
                      "matches": ["https://open.spotify.com/*"],
                      "js": ["content.js"],
                      "run_at": "document_start",
                      "all_frames": true
                  }],
                  "permissions": ["activeTab", "scripting"],
                  "host_permissions": ["https://open.spotify.com/*"]
              }
              
              content_script = '''
              (function() {
                  console.log('Content script injecting into main world');
                  const script = document.createElement('script');
                  script.textContent = `%s`;
                  (document.head || document.documentElement).appendChild(script);
                  script.remove();
                  console.log('Script injected into main world');
              })();
              ''' % escaped_script  # Use % operator for string formatting
              
              with open(os.path.join(extension_dir, 'manifest.json'), 'w') as f:
                  json.dump(manifest, f, indent=2)
              
              with open(os.path.join(extension_dir, 'content.js'), 'w') as f:
                  f.write(content_script)
              
              print(f"✓ Created extension in {extension_dir}")
              
              chrome_options = Options()
              chrome_options.add_argument('--headless=new')
              chrome_options.add_argument('--no-sandbox')
              chrome_options.add_argument('--disable-dev-shm-usage')
              chrome_options.add_argument('--disable-gpu')
              chrome_options.add_argument('--disable-web-security')
              chrome_options.add_argument('--disable-features=VizDisplayCompositor')
              chrome_options.add_argument('--disable-plugins')
              chrome_options.add_argument('--disable-images')
              chrome_options.add_argument('--disable-background-timer-throttling')
              chrome_options.add_argument('--disable-renderer-backgrounding')
              chrome_options.add_argument('--disable-backgrounding-occluded-windows')
              chrome_options.add_argument('--disable-ipc-flooding-protection')
              chrome_options.add_argument('--window-size=1920,1080')
              chrome_options.add_argument('--remote-debugging-port=9222')
              chrome_options.add_argument('--memory-pressure-off')
              chrome_options.add_argument('--max_old_space_size=4096')
              chrome_options.add_argument(f'--user-data-dir={temp_dir}')
              chrome_options.add_argument(f'--load-extension={extension_dir}')
              chrome_options.add_argument('--enable-logging')
              chrome_options.add_argument('--log-level=0')
              
              service = Service(ChromeDriverManager().install())
              driver = webdriver.Chrome(service=service, options=chrome_options)
              driver._userscript = clean_script
              
              return driver, temp_dir, extension_dir
          
          def extract_tokens_with_extension(driver, max_attempts=3):
              for attempt in range(max_attempts):
                  try:
                      print(f"Attempt {attempt + 1}/{max_attempts} to extract tokens...")
                      print("Pre-injecting script via execute_script...")
                      try:
                          driver.execute_script(f'''
                              console.log('Direct injection starting...');
                              {driver._userscript}
                              console.log('Direct injection completed');
                          ''')
                      except Exception as e:
                          print(f"Direct injection error: {e}")
                      
                      print("Navigating to Spotify...")
                      driver.get('https://open.spotify.com/')
                      
                      print("Post-navigation script injection...")
                      try:
                          driver.execute_script(f'''
                              console.log('Post-nav injection starting...');
                              {driver._userscript}
                              console.log('Post-nav injection completed');
                          ''')
                      except Exception as e:
                          print(f"Post-nav injection error: {e}")
                      
                      print("Waiting for page to load...")
                      time.sleep(8)
                      
                      try:
                          page_source_sample = driver.execute_script('''
                              return {
                                  title: document.title,
                                  hasWebpack: typeof window.webpackChunk_N_E !== 'undefined',
                                  hasTokens: typeof window.TOKENS !== 'undefined',
                                  webpackType: typeof window.webpackChunk_N_E,
                                  tokensType: typeof window.TOKENS,
                                  scripts: Array.from(document.scripts).length,
                                  consoleLogs: Array.from(document.getElementsByTagName('script')).map(s => s.textContent).join(' ')
                              }
                          ''')
                          print(f"Page state: {page_source_sample}")
                      except Exception as e:
                          print(f"Page state check error: {e}")
                      
                      print("Waiting for TOKENS to be available...")
                      for i in range(24):
                          try:
                              result =
