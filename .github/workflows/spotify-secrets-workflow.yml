name: Spotify Secret Workflow

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'  # Run every 6 hours

jobs:
  extract-secret:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install selenium webdriver-manager
          
      - name: Verify tampermonkey script exists
        run: |
          if [ ! -f "tampermonkey_script.js" ]; then
            echo "Error: tampermonkey_script.js not found in repository root"
            exit 1
          fi
          echo "✓ tampermonkey_script.js found"
          
      - name: Extract Spotify secrets
        run: |
          python3 << 'EOF'
          import time
          import os
          import json
          import tempfile
          from selenium import webdriver
          from selenium.webdriver.chrome.options import Options
          from selenium.webdriver.chrome.service import Service
          from selenium.webdriver.support.ui import WebDriverWait
          from selenium.webdriver.support import expected_conditions as EC
          from selenium.common.exceptions import TimeoutException, WebDriverException
          from webdriver_manager.chrome import ChromeDriverManager
          
          def setup_chrome_driver():
              """Setup Chrome driver with proper options for CI environment"""
              chrome_options = Options()
              
              # Essential CI options
              chrome_options.add_argument('--headless=new')  # Use new headless mode
              chrome_options.add_argument('--no-sandbox')
              chrome_options.add_argument('--disable-dev-shm-usage')
              chrome_options.add_argument('--disable-gpu')
              chrome_options.add_argument('--disable-web-security')
              chrome_options.add_argument('--disable-features=VizDisplayCompositor')
              chrome_options.add_argument('--disable-extensions')
              chrome_options.add_argument('--disable-plugins')
              chrome_options.add_argument('--disable-images')
              chrome_options.add_argument('--disable-javascript-harmony-shipping')
              chrome_options.add_argument('--disable-background-timer-throttling')
              chrome_options.add_argument('--disable-renderer-backgrounding')
              chrome_options.add_argument('--disable-backgrounding-occluded-windows')
              chrome_options.add_argument('--disable-ipc-flooding-protection')
              chrome_options.add_argument('--window-size=1920,1080')
              chrome_options.add_argument('--remote-debugging-port=9222')
              
              # Memory and performance optimizations
              chrome_options.add_argument('--memory-pressure-off')
              chrome_options.add_argument('--max_old_space_size=4096')
              
              # Use temporary directory for user data
              temp_dir = tempfile.mkdtemp(prefix='chrome_user_data_')
              chrome_options.add_argument(f'--user-data-dir={temp_dir}')
              
              # Setup Chrome service
              service = Service(ChromeDriverManager().install())
              
              return webdriver.Chrome(service=service, options=chrome_options), temp_dir
          
          def inject_userscript(driver):
              """Inject the tampermonkey script into the page"""
              try:
                  with open('tampermonkey_script.js', 'r', encoding='utf-8') as f:
                      script_content = f.read()
                  
                  # Remove userscript headers and clean the script
                  lines = script_content.split('\n')
                  script_lines = []
                  in_header = False
                  
                  for line in lines:
                      if line.strip().startswith('// ==UserScript=='):
                          in_header = True
                          continue
                      elif line.strip().startswith('// ==/UserScript=='):
                          in_header = False
                          continue
                      elif not in_header:
                          script_lines.append(line)
                  
                  clean_script = '\n'.join(script_lines)
                  
                  # Execute the script
                  driver.execute_script(clean_script)
                  print("✓ Userscript injected successfully")
                  return True
                  
              except Exception as e:
                  print(f"✗ Failed to inject userscript: {e}")
                  return False
          
          def extract_tokens(driver, max_attempts=3):
              """Extract tokens from Spotify with retry logic"""
              for attempt in range(max_attempts):
                  try:
                      print(f"Attempt {attempt + 1}/{max_attempts} to extract tokens...")
                      
                      # Navigate to Spotify
                      print("Navigating to Spotify...")
                      driver.get('https://open.spotify.com/')
                      
                      # Wait for initial page load
                      WebDriverWait(driver, 10).until(
                          lambda d: d.execute_script('return document.readyState') == 'complete'
                      )
                      
                      # Inject the userscript
                      if not inject_userscript(driver):
                          continue
                      
                      # Wait for TOKENS to be available
                      print("Waiting for TOKENS to be available...")
                      wait = WebDriverWait(driver, 45)
                      
                      def tokens_available(driver):
                          try:
                              result = driver.execute_script('''
                                  if (window.TOKENS && window.TOKENS.secrets && window.TOKENS.secrets[1]) {
                                      return window.TOKENS.secrets[1];
                                  }
                                  return null;
                              ''')
                              return result is not None
                          except:
                              return False
                      
                      wait.until(tokens_available)
                      
                      # Extract the secret
                      secret_data = driver.execute_script('''
                          try {
                              if (window.TOKENS && window.TOKENS.secrets && window.TOKENS.secrets[1]) {
                                  return window.TOKENS.secrets[1];
                              }
                              return null;
                          } catch (e) {
                              console.error('Error extracting tokens:', e);
                              return null;
                          }
                      ''')
                      
                      if secret_data:
                          print(f"✓ Secret extracted: {json.dumps(secret_data)}")
                          return secret_data
                      else:
                          print("✗ No secret data found")
                          
                  except TimeoutException:
                      print(f"✗ Timeout on attempt {attempt + 1}")
                      if attempt < max_attempts - 1:
                          print("Retrying...")
                          time.sleep(5)
                  except Exception as e:
                      print(f"✗ Error on attempt {attempt + 1}: {e}")
                      if attempt < max_attempts - 1:
                          print("Retrying...")
                          time.sleep(5)
              
              return None
          
          def main():
              driver = None
              temp_dir = None
              
              try:
                  print("Setting up Chrome driver...")
                  driver, temp_dir = setup_chrome_driver()
                  
                  print("Starting token extraction...")
                  secret_data = extract_tokens(driver)
                  
                  if secret_data:
                      # Format as array to match existing format
                      output_data = [secret_data]
                      
                      # Write to file
                      with open('noidea.txt', 'w', encoding='utf-8') as f:
                          json.dump(output_data, f, indent=2)
                      
                      print(f"✓ Secret saved to noidea.txt")
                      print(f"Secret: {json.dumps(output_data)}")
                      
                  else:
                      print("✗ Failed to extract secret after all attempts")
                      exit(1)
                      
              except Exception as e:
                  print(f"✗ Fatal error: {e}")
                  exit(1)
                  
              finally:
                  if driver:
                      try:
                          driver.quit()
                          print("✓ Driver closed")
                      except:
                          pass
                  
                  # Clean up temp directory
                  if temp_dir and os.path.exists(temp_dir):
                      try:
                          import shutil
                          shutil.rmtree(temp_dir, ignore_errors=True)
                          print("✓ Temp directory cleaned")
                      except:
                          pass
          
          if __name__ == "__main__":
              main()
          EOF
          
      - name: Check if secret was extracted
        run: |
          if [ -f "noidea.txt" ]; then
            echo "✓ Secret file created"
            echo "Content:"
            cat noidea.txt
          else
            echo "✗ Secret file not found"
            exit 1
          fi
          
      - name: Commit and push changes
        run: |
          git config --local user.name 'github-actions[bot]'
          git config --local user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Check if there are changes
          if git diff --quiet noidea.txt; then
            echo "No changes to commit"
          else
            git add noidea.txt
            git commit -m "Update Spotify secrets - $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            git push
            echo "✓ Changes committed and pushed"
          fi
