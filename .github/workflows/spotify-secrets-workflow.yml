name: Spotify Secrets Workflow

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *' # Runs daily at midnight UTC

jobs:
  extract-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install selenium webdriver-manager requests

      - name: Install Chrome and ChromeDriver
        run: |
          # Install Chrome
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          
          # Install ChromeDriver using webdriver-manager
          python -c "from webdriver_manager.chrome import ChromeDriverManager; ChromeDriverManager().install()"

      - name: Create noidea.txt if it doesn't exist
        run: |
          if [ ! -f noidea.txt ]; then
            echo "[]" > noidea.txt
          fi

      - name: Download Tampermonkey script
        run: |
          mkdir -p tampermonkey_scripts
          echo "Attempting to download Tampermonkey script..."
          curl -L -f -s -o tampermonkey_scripts/spotify_secrets.user.js https://raw.githubusercontent.com/itsmechinmoy/echo-extensions/main/tampermonkey_scripts/spotify_secrets.user.js
          echo "Downloaded from main/tampermonkey_scripts/spotify_secrets.user.js"
          
          # Verify the script was downloaded
          if [ -f tampermonkey_scripts/spotify_secrets.user.js ]; then
            echo "Script file size: $(wc -c < tampermonkey_scripts/spotify_secrets.user.js) bytes"
            echo "First few lines:"
            head -n 5 tampermonkey_scripts/spotify_secrets.user.js
          else
            echo "ERROR: Script file not found!"
            exit 1
          fi

      - name: Run Selenium script
        run: |
          python3 << 'EOF'
          import sys
          import traceback
          from selenium import webdriver
          from selenium.webdriver.chrome.service import Service
          from selenium.webdriver.chrome.options import Options
          from selenium.webdriver.common.by import By
          from selenium.webdriver.support.ui import WebDriverWait
          from selenium.webdriver.support import expected_conditions as EC
          from webdriver_manager.chrome import ChromeDriverManager
          import time
          import json
          import os

          try:
              print("=== STARTING SELENIUM SCRIPT ===")
              
              # Setup Chrome options for headless mode in CI
              options = Options()
              options.add_argument('--headless=new')
              options.add_argument('--no-sandbox')
              options.add_argument('--disable-dev-shm-usage')
              options.add_argument('--disable-gpu')
              options.add_argument('--disable-web-security')
              options.add_argument('--disable-features=VizDisplayCompositor')
              options.add_argument('--window-size=1920,1080')
              options.add_argument('--disable-setuid-sandbox')
              options.add_argument('--disable-extensions')
              options.add_argument('--disable-plugins')
              options.add_argument('--disable-images')
              options.add_argument('--disable-background-timer-throttling')
              options.add_argument('--disable-backgrounding-occluded-windows')
              options.add_argument('--disable-renderer-backgrounding')
              options.add_argument('--disable-ipc-flooding-protection')
              options.add_argument('--user-agent=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36')
              options.add_argument('--disable-content-security-policy')
              options.add_argument('--ignore-certificate-errors')
              options.add_argument('--allow-running-insecure-content')
              options.add_argument('--disable-blink-features=AutomationControlled')
              options.add_experimental_option("excludeSwitches", ["enable-automation"])
              options.add_experimental_option('useAutomationExtension', False)

              print("Installing ChromeDriver...")
              service = Service(ChromeDriverManager().install())
              print("Creating Chrome driver...")
              driver = webdriver.Chrome(service=service, options=options)
              
              # Remove automation indicators
              driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")

              print("Navigating to Spotify...")
              driver.get('https://open.spotify.com/')
              
              print("Reading and injecting Tampermonkey script...")
              with open('tampermonkey_scripts/spotify_secrets.user.js', 'r') as file:
                  script_content = file.read()
              
              print(f"Script length: {len(script_content)} characters")
              
              # Remove the userscript headers and inject the core functionality
              script_lines = script_content.split('\n')
              script_start = -1
              for i, line in enumerate(script_lines):
                  if line.strip() == '// ==/UserScript==':
                      script_start = i + 1
                      break
              
              if script_start > 0:
                  core_script = '\n'.join(script_lines[script_start:])
              else:
                  core_script = script_content
              
              # Inject the script immediately
              print("Injecting script...")
              driver.execute_script(core_script)
              
              print("Waiting for page to fully load and webpack to initialize...")
              # Wait for Spotify to load
              try:
                  WebDriverWait(driver, 30).until(
                      lambda d: d.execute_script('return document.readyState') == 'complete'
                  )
                  print("Page loaded completely")
              except:
                  print("Timeout waiting for page load, continuing...")
              
              # Give more time for webpack and the script to work
              print("Waiting for tokens to be extracted...")
              max_wait_time = 240  # 4 minutes
              check_interval = 5
              elapsed_time = 0
              
              tokens_found = False
              while elapsed_time < max_wait_time and not tokens_found:
                  try:
                      # Check if TOKENS exists
                      tokens_exists = driver.execute_script('return typeof window.TOKENS !== "undefined"')
                      if tokens_exists:
                          print("TOKENS object found!")
                          tokens_found = True
                          break
                      
                      # Also check for any console messages about tokens
                      logs = driver.get_log('browser')
                      for log in logs:
                          if 'TOKENS' in log['message']:
                              print(f"Token-related log: {log['message']}")
                      
                      time.sleep(check_interval)
                      elapsed_time += check_interval
                      print(f"Still waiting... ({elapsed_time}s elapsed)")
                      
                  except Exception as e:
                      print(f"Error during token check: {e}")
                      time.sleep(check_interval)
                      elapsed_time += check_interval
              
              print("Attempting to extract secrets...")
              
              # Check if TOKENS exists
              tokens_exists = driver.execute_script('return typeof window.TOKENS !== "undefined"')
              print(f"TOKENS exists: {tokens_exists}")
              
              if tokens_exists:
                  # Get TOKENS structure
                  tokens_keys = driver.execute_script('return window.TOKENS ? Object.keys(window.TOKENS) : []')
                  print(f"TOKENS keys: {tokens_keys}")
                  
                  # Check secrets array
                  secrets_length = driver.execute_script('return window.TOKENS?.secrets?.length || 0')
                  print(f"Secrets array length: {secrets_length}")
                  
                  if secrets_length > 0:
                      # Try to get all secrets
                      for i in range(min(secrets_length, 5)):  # Check first 5 secrets
                          try:
                              secret = driver.execute_script(f'return JSON.stringify(window.TOKENS?.secrets?.[{i}])')
                              if secret and secret != 'undefined' and secret != 'null':
                                  secret_data = json.loads(secret)
                                  print(f"Secret {i}: {secret_data}")
                                  
                                  # If this looks like a valid secret, save it
                                  if isinstance(secret_data, dict) and 'secret' in secret_data:
                                      # Read existing secrets
                                      try:
                                          with open('noidea.txt', 'r') as file:
                                              existing_secrets = json.load(file)
                                      except (json.JSONDecodeError, FileNotFoundError):
                                          existing_secrets = []
                                      
                                      # Check if secret already exists
                                      if not any(s.get('secret') == secret_data.get('secret') for s in existing_secrets):
                                          existing_secrets.append(secret_data)
                                          
                                          # Write updated secrets
                                          with open('noidea.txt', 'w') as file:
                                              json.dump(existing_secrets, file, indent=2)
                                          
                                          print(f'Secret {i} extracted and saved!')
                                      else:
                                          print(f'Secret {i} already exists in noidea.txt')
                          except Exception as e:
                              print(f"Error extracting secret {i}: {e}")
                  else:
                      print('No secrets found in TOKENS.secrets array')
                      
                      # Try to get the entire TOKENS object for debugging
                      try:
                          tokens_debug = driver.execute_script('return JSON.stringify(window.TOKENS, null, 2)')
                          print(f"Full TOKENS object: {tokens_debug}")
                      except Exception as e:
                          print(f"Error getting full TOKENS: {e}")
              else:
                  print('TOKENS object not found')
                  
                  # Check if webpack was detected
                  webpack_detected = driver.execute_script('return window.webpackChunk_N_E !== undefined')
                  print(f"Webpack detected: {webpack_detected}")
                  
              # Print recent browser console logs for debugging
              print("=== RECENT BROWSER CONSOLE LOGS ===")
              try:
                  logs = driver.get_log('browser')
                  if logs:
                      recent_logs = logs[-20:]  # Last 20 logs
                      for log in recent_logs:
                          print(f"  [{log['level']}] {log['message']}")
                  else:
                      print("  No console logs found")
              except Exception as log_error:
                  print(f"  Error getting logs: {log_error}")

          except Exception as e:
              print('=== ERROR OCCURRED ===')
              print('Error:', str(e))
              print('Traceback:')
              traceback.print_exc()
          finally:
              try:
                  driver.quit()
                  print("=== DRIVER CLOSED ===")
              except:
                  pass
          EOF

      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add noidea.txt
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update secrets with new Spotify token"
            git push
          fi
