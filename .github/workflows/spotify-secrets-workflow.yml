name: Spotify Secrets Workflow

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *' # Runs daily at midnight UTC

jobs:
  extract-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install selenium webdriver-manager requests

      - name: Install Chrome and ChromeDriver
        run: |
          # Install Chrome
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          
          # Install ChromeDriver using webdriver-manager (handles version matching automatically)
          python -c "from webdriver_manager.chrome import ChromeDriverManager; ChromeDriverManager().install()"

      - name: Create noidea.txt if it doesn't exist
        run: |
          if [ ! -f noidea.txt ]; then
            echo "[]" > noidea.txt
          fi

      - name: Download Tampermonkey script
        run: |
          mkdir -p tampermonkey_scripts
          curl -L -o tampermonkey_scripts/spotify_secrets.user.js https://raw.githubusercontent.com/itsmechinmoy/echo-extensions/main/spotify_secrets.user.js

      - name: Run Selenium script
        run: |
          python3 << 'EOF'
          from selenium import webdriver
          from selenium.webdriver.chrome.service import Service
          from selenium.webdriver.chrome.options import Options
          from webdriver_manager.chrome import ChromeDriverManager
          import time
          import json
          import os

          # Setup Chrome options for headless mode in CI
          options = Options()
          options.add_argument('--headless=new')
          options.add_argument('--no-sandbox')
          options.add_argument('--disable-dev-shm-usage')
          options.add_argument('--disable-gpu')
          options.add_argument('--disable-web-security')
          options.add_argument('--disable-features=VizDisplayCompositor')
          options.add_argument('--window-size=1920,1080')
          options.add_argument('--disable-setuid-sandbox')
          options.add_argument('--disable-extensions')
          options.add_argument('--disable-plugins')
          options.add_argument('--disable-images')
          options.add_argument('--disable-javascript-harmony-shipping')
          options.add_argument('--disable-background-timer-throttling')
          options.add_argument('--disable-backgrounding-occluded-windows')
          options.add_argument('--disable-renderer-backgrounding')
          options.add_argument('--disable-ipc-flooding-protection')
          options.add_argument('--user-agent=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')

          # Use webdriver-manager to handle ChromeDriver
          service = Service(ChromeDriverManager().install())
          driver = webdriver.Chrome(service=service, options=options)

          try:
              print("Navigating to Spotify...")
              driver.get('https://open.spotify.com/')
              
              # Wait for initial page load
              time.sleep(5)
              
              print("Reading and injecting original Tampermonkey script...")
              # Read and inject the original Tampermonkey script as-is
              with open('tampermonkey_scripts/spotify_secrets.user.js', 'r') as file:
                  script_content = file.read()
              
              # Inject the script exactly as the dev created it
              driver.execute_script(script_content)
              
              # Wait for the script to execute and webpack to be patched
              print("Waiting for tokens to be extracted...")
              time.sleep(20)
              
              # Try to get the tokens using the exact same method as original
              print("Attempting to extract secrets...")
              secret = driver.execute_script('return JSON.stringify(window.TOKENS?.secrets?.[1])')
              
              if secret:
                  secret_data = json.loads(secret)
                  print(f"Secret extracted: {secret_data}")
                  
                  # Read existing secrets
                  with open('noidea.txt', 'r') as file:
                      try:
                          existing_secrets = json.load(file)
                      except json.JSONDecodeError:
                          existing_secrets = []
                  
                  # Check if secret already exists
                  if not any(s.get('secret') == secret_data.get('secret') for s in existing_secrets):
                      existing_secrets.append(secret_data)
                      
                      # Write updated secrets
                      with open('noidea.txt', 'w') as file:
                          json.dump(existing_secrets, file, indent=2)
                      
                      print('Secret extracted and updated:', secret_data)
                  else:
                      print('Secret already exists in noidea.txt')
              else:
                  print('No secret found in TOKENS.secrets[1]')
                  # Debug info
                  tokens_debug = driver.execute_script('return window.TOKENS ? "TOKENS exists" : "TOKENS not found"')
                  print(f"Debug: {tokens_debug}")

          except Exception as e:
              print('Error occurred:', str(e))
              # Print browser logs for debugging
              try:
                  logs = driver.get_log('browser')
                  if logs:
                      print("Browser console logs:")
                      for log in logs:
                          print(f"  {log}")
              except:
                  pass
          finally:
              driver.quit()
          EOF

      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add noidea.txt
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update secrets with new Spotify token"
            git push
          fi
